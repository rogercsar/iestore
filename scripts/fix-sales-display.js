// Script para corrigir o problema de exibi√ß√£o das vendas
const https = require('https');

async function fixSalesDisplay() {
  console.log('üîß Corrigindo problema de exibi√ß√£o das vendas...\n');
  
  try {
    // Test 1: Verificar dados da API
    console.log('1. Verificando dados da API de vendas...');
    const salesResponse = await fetch('http://localhost:8888/.netlify/functions/postgres?table=sales');
    const salesData = await salesResponse.json();
    
    if (!Array.isArray(salesData)) {
      console.log('‚ùå Dados n√£o s√£o um array:', typeof salesData);
      return;
    }
    
    console.log(`‚úÖ Dados recebidos: ${salesData.length} vendas`);
    
    // Test 2: Verificar estrutura dos dados
    console.log('\n2. Verificando estrutura dos dados...');
    if (salesData.length > 0) {
      const firstSale = salesData[0];
      console.log('üìã Estrutura da primeira venda:');
      console.log('Campos dispon√≠veis:', Object.keys(firstSale));
      
      // Verificar se os campos est√£o corretos
      const expectedFields = ['id', 'dateISO', 'product', 'quantity', 'totalValue', 'customerName'];
      expectedFields.forEach(field => {
        if (firstSale[field] !== undefined) {
          console.log(`‚úÖ Campo ${field}: ${firstSale[field]}`);
        } else {
          console.log(`‚ùå Campo ${field}: ausente`);
        }
      });
    }
    
    // Test 3: Verificar se h√° problemas de mapeamento
    console.log('\n3. Verificando mapeamento de campos...');
    const mappedSales = salesData.map((sale, index) => {
      const mapped = {
        id: sale.id || `sale_${Date.now()}_${index}`,
        dateISO: sale.dateISO || new Date().toISOString(),
        product: sale.product || 'Produto n√£o informado',
        quantity: parseInt(sale.quantity) || 0,
        totalValue: parseFloat(sale.totalValue) || 0,
        totalCost: parseFloat(sale.totalCost) || 0,
        profit: parseFloat(sale.profit) || 0,
        customerName: sale.customerName || 'Cliente n√£o informado',
        customerPhone: sale.customerPhone || null,
        paymentMethod: sale.paymentMethod || 'N√£o informado',
        status: sale.status || 'paid'
      };
      
      console.log(`Venda ${index + 1}: ${mapped.product} - ${mapped.customerName} (R$ ${mapped.totalValue})`);
      return mapped;
    });
    
    console.log(`‚úÖ ${mappedSales.length} vendas mapeadas com sucesso`);
    
    // Test 4: Verificar se os dados est√£o sendo filtrados corretamente
    console.log('\n4. Verificando filtros...');
    const today = new Date();
    const todayStart = new Date(today.getFullYear(), today.getMonth(), today.getDate());
    
    const todaySales = mappedSales.filter(sale => {
      const saleDate = new Date(sale.dateISO);
      return saleDate >= todayStart;
    });
    
    console.log(`‚úÖ Vendas de hoje: ${todaySales.length}`);
    
    // Test 5: Verificar se os dados est√£o sendo ordenados corretamente
    console.log('\n5. Verificando ordena√ß√£o...');
    const sortedSales = mappedSales.sort((a, b) => 
      new Date(b.dateISO).getTime() - new Date(a.dateISO).getTime()
    );
    
    console.log('‚úÖ Vendas ordenadas por data (mais recentes primeiro)');
    console.log('√öltimas 3 vendas:');
    sortedSales.slice(0, 3).forEach((sale, index) => {
      console.log(`  ${index + 1}. ${sale.product} - ${sale.customerName} (${new Date(sale.dateISO).toLocaleDateString('pt-BR')})`);
    });
    
    // Test 6: Verificar se h√° problemas com o status
    console.log('\n6. Verificando status das vendas...');
    const statusCounts = mappedSales.reduce((acc, sale) => {
      acc[sale.status] = (acc[sale.status] || 0) + 1;
      return acc;
    }, {});
    
    console.log('üìä Contagem por status:');
    Object.entries(statusCounts).forEach(([status, count]) => {
      console.log(`  - ${status}: ${count} vendas`);
    });
    
    console.log('\nüéØ Corre√ß√£o conclu√≠da!');
    console.log('\nüí° Se as vendas ainda n√£o aparecem na tela, verifique:');
    console.log('1. Se o store est√° sendo atualizado corretamente');
    console.log('2. Se h√° erros no console do navegador');
    console.log('3. Se os dados est√£o sendo carregados no onMounted');
    console.log('4. Se os filtros de data est√£o funcionando corretamente');
    
  } catch (error) {
    console.error('‚ùå Erro ao corrigir:', error.message);
  }
}

// Fun√ß√£o fetch para Node.js (se n√£o estiver dispon√≠vel)
if (typeof fetch === 'undefined') {
  global.fetch = require('node-fetch');
}

// Run the fix
fixSalesDisplay().catch(console.error);
