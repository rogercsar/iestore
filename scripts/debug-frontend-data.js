// Script para debugar o problema de exibi√ß√£o dos dados no frontend
const https = require('https');

async function debugFrontendData() {
  console.log('üîç Debugando problema de exibi√ß√£o no frontend...\n');
  
  try {
    // Test 1: Verificar dados da API
    console.log('1. Verificando dados da API de clientes...');
    const customersResponse = await fetch('http://localhost:8888/.netlify/functions/postgres?table=customers');
    const customersData = await customersResponse.json();
    
    console.log(`‚úÖ Dados recebidos: ${customersData.length} clientes`);
    console.log('üìã Estrutura dos dados:');
    console.log(JSON.stringify(customersData, null, 2));
    
    // Test 2: Verificar se os dados est√£o sendo processados corretamente
    console.log('\n2. Verificando processamento dos dados...');
    if (Array.isArray(customersData)) {
      console.log(`‚úÖ Dados s√£o um array com ${customersData.length} itens`);
      
      if (customersData.length > 0) {
        const firstCustomer = customersData[0];
        console.log('üìã Estrutura do primeiro cliente:');
        console.log('Campos dispon√≠veis:', Object.keys(firstCustomer));
        
        // Verificar campos obrigat√≥rios
        const requiredFields = ['id', 'name', 'phone', 'email'];
        requiredFields.forEach(field => {
          if (firstCustomer[field]) {
            console.log(`‚úÖ Campo ${field}: ${firstCustomer[field]}`);
          } else {
            console.log(`‚ùå Campo ${field}: ausente ou vazio`);
          }
        });
        
        // Verificar se h√° campos extras que podem estar causando problemas
        const extraFields = Object.keys(firstCustomer).filter(key => 
          !['id', 'name', 'phone', 'email', 'address', 'totalPurchases', 'totalValue', 'pendingAmount', 'lastPurchase', 'notes', 'status'].includes(key)
        );
        
        if (extraFields.length > 0) {
          console.log('‚ö†Ô∏è Campos extras encontrados:', extraFields);
        }
      }
    }
    
    // Test 3: Verificar se os dados est√£o sendo mapeados corretamente
    console.log('\n3. Verificando mapeamento dos dados...');
    const mappedCustomers = customersData.map((customer, index) => {
      const mapped = {
        id: customer.id || `customer_${Date.now()}_${index}`,
        name: customer.name || 'Nome n√£o informado',
        phone: customer.phone || 'Telefone n√£o informado',
        email: customer.email || 'Email n√£o informado',
        address: customer.address || 'Endere√ßo n√£o informado',
        totalPurchases: customer.totalPurchases || 0,
        totalValue: customer.totalValue || 0,
        pendingAmount: customer.pendingAmount || 0,
        lastPurchase: customer.lastPurchase || null,
        notes: customer.notes || null,
        status: customer.status || 'active'
      };
      
      console.log(`Cliente ${index + 1}: ${mapped.name} (${mapped.phone})`);
      return mapped;
    });
    
    console.log(`‚úÖ ${mappedCustomers.length} clientes mapeados com sucesso`);
    
    // Test 4: Verificar se os dados est√£o sendo filtrados corretamente
    console.log('\n4. Verificando filtros...');
    const filteredCustomers = mappedCustomers.filter(customer => 
      customer.name && customer.name.trim() !== '' && customer.name !== 'Nome n√£o informado'
    );
    
    console.log(`‚úÖ Clientes v√°lidos ap√≥s filtro: ${filteredCustomers.length}`);
    
    if (filteredCustomers.length !== mappedCustomers.length) {
      console.log('‚ö†Ô∏è Alguns clientes foram filtrados');
      const filteredOut = mappedCustomers.filter(customer => 
        !customer.name || customer.name.trim() === '' || customer.name === 'Nome n√£o informado'
      );
      console.log('Clientes filtrados:', filteredOut.map(c => c.name));
    }
    
    // Test 5: Verificar se os dados est√£o sendo ordenados corretamente
    console.log('\n5. Verificando ordena√ß√£o...');
    const sortedCustomers = filteredCustomers.sort((a, b) => 
      a.name.localeCompare(b.name)
    );
    
    console.log('‚úÖ Clientes ordenados por nome');
    console.log('Primeiros 3 clientes:');
    sortedCustomers.slice(0, 3).forEach((customer, index) => {
      console.log(`  ${index + 1}. ${customer.name} (${customer.phone})`);
    });
    
    // Test 6: Verificar se h√° problemas com o status
    console.log('\n6. Verificando status dos clientes...');
    const statusCounts = mappedCustomers.reduce((acc, customer) => {
      acc[customer.status] = (acc[customer.status] || 0) + 1;
      return acc;
    }, {});
    
    console.log('üìä Contagem por status:');
    Object.entries(statusCounts).forEach(([status, count]) => {
      console.log(`  - ${status}: ${count} clientes`);
    });
    
    console.log('\nüéØ Debug conclu√≠do!');
    console.log('\nüí° Se os clientes ainda n√£o aparecem no frontend, verifique:');
    console.log('1. Se o store est√° sendo atualizado corretamente');
    console.log('2. Se h√° erros no console do navegador');
    console.log('3. Se os dados est√£o sendo carregados no onMounted');
    console.log('4. Se h√° problemas com a reatividade do Vue');
    
  } catch (error) {
    console.error('‚ùå Erro ao debugar:', error.message);
  }
}

// Fun√ß√£o fetch para Node.js (se n√£o estiver dispon√≠vel)
if (typeof fetch === 'undefined') {
  global.fetch = require('node-fetch');
}

// Run the debug
debugFrontendData().catch(console.error);
